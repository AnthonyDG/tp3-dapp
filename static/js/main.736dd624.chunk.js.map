{"version":3,"sources":["getWeb3.js","components/Welcome.js","components/RegisterAddress.js","components/RegisterProposal.js","components/Vote4Proposal.js","components/WinningProposal.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","Welcome","address","slice","className","this","props","data","currentWorkflowStatus","hiddenAddress","accounts","Component","RegisterAddress","e","adresse","document","getElementById","value","isRegistered_TEMP","Array","isArray","listVoters","includes","match","instanceContract","methods","addVoter","send","from","owner","transac","push","events","VoterRegistered","returnValues","_voterAddress","setState","innerHTML","setTimeout","islistVotersEmpty","length","type","id","placeholder","size","onClick","runSet","bind","map","RegisterProposal","proposition","addProposal","listProposals","islistProposalsEmpty","rows","cols","Vote4proposal","id_proposition","setVote","pattern","currElement","index","WinningProposal","winPropDescription","winPropVoteCount","winPropID","App","state","networkId","deployedNetwork","contractAddress","owned","isRegistered","displayWorkflowStatus","componentDidMount","eth","getAccounts","net","getId","VotingContract","networks","Contract","abi","_address","call","alert","error","setWorkflowStatus","options","fromBlock","toBlock","getPastEvents","listVotersPastEvents","listPastVotersOnly","listProposalsPastEvents","listPastProposalsIDOnly","_proposalId","i","getOneProposal","recipient","description","getWorkflowStatus","Number","workflowStatus","WinningProp","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","_description","_voteCount","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.736dd624.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n          // window.ethereum.on('disconnect',function(){\n          //   alert(\"il faut se connecter\");\n          // });\n          window.ethereum.on('accountsChanged',function(){\n            resolve(web3);\n            window.location.reload();\n            // console.log('getWeb3.js > accountsChanged');\n          });\n          // window.ethereum.on('chainChanged',function(){\n          //   window.location.reload();\n          // });\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\n\n\nexport default class Welcome extends Component {\n\n    hiddenAddress(address) {\n        if (address) {\n            const startAdd = address.slice(0, 5);\n            const endAdd = address.slice(-4);\n            return startAdd + '...' + endAdd;\n        }\n    }\n\n\n    render() {\n        return (\n            <div className = \"welCome\">\n                    {this.props.data.currentWorkflowStatus < 2 ? (<>👋 <b>Bienvenue !</b></>) : (\"\")}\n                <br />\n                <div className = \"votreAdresseC\">\n                    <b>Votre adresse de connexion :</b>\n                    <br />🔑 {this.hiddenAddress(this.props.data.accounts[0])}\n                </div>\n            </div>\n            );\n    }\n}","import React, { Component } from \"react\";\n\n\nexport default class RegisterAddress extends Component {\n\n    async runSet (e) {\n        let adresse = document.getElementById(\"valeur\").value;\n        let isRegistered_TEMP = false;\n\n        if (Array.isArray(this.props.data.listVoters)) {\n            isRegistered_TEMP = this.props.data.listVoters.includes(adresse); // doublon : true ou false.\n            }\n\n        if (\n            adresse.match(/^0x[a-fA-F0-9]{40}$/g)\n            && !isRegistered_TEMP\n            && (this.props.data.currentWorkflowStatus === 0)\n            ) {\n            const transac = await this.props.data.instanceContract.methods.addVoter(adresse).send({ from: this.props.data.owner}); // \"this.props.data\" provient de <RegisterAddress data = {this.state} />\n\n            this.props.data.listVoters.push(transac.events.VoterRegistered.returnValues._voterAddress);\n\n            this.setState({ listVoters: this.props.data.listVoters });\n            }\n        else {\n            if ( !adresse.match(/^0x[a-fA-F0-9]{40}$/g) ) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 L'adresse doit être au format hexadécimal et d'une longueur de 42 caractères. 🛑\";\n                }\n            else if (isRegistered_TEMP) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 Cette adresse a déjà été enregistrée. 🛑\";\n            }\n            else if (this.props.data.currentWorkflowStatus !== 0) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 Ce n'est pas la session d'enregistrement des votants. 🛑\";\n            }\n            setTimeout(() => { document.getElementById(\"msgError\").innerHTML = \"\"; }, \"3000\"); // Le message s'effacera dans 3 secondes.\n            }\n        };\n\n\n    render() {\n        let islistVotersEmpty = true;\n        if (this.props.data.listVoters && this.props.data.listVoters.length > 0) { islistVotersEmpty = false; }\n \n        return (\n            <>\n                <div className = \"mainApp\">\n                    <input className=\"input\" type=\"text\" id=\"valeur\" placeholder=\"Adresse du votant\" size=\"42\" />\n                    <div id = \"msgError\"></div>\n                    <br /><button className = \"button buttonGreen\" onClick={this.runSet.bind(this)}>Enregistrer l'adresse d'un votant</button>\n                </div>\n                <div className = \"nextApp\">\n                    <b>Liste des adresses déjà enregistrées :</b>\n                    { islistVotersEmpty ? (' - VIDE -') : ('') }\n                    { this.props.data.listVoters ? this.props.data.listVoters.map( value => (<><br />{value}</>) ) : '' }\n                </div>\n            </>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n\nexport default class RegisterProposal extends Component {\n\n    async runSet (e) {\n        let proposition = document.getElementById(\"proposition\").value;\n\n        if (\n            proposition !== ''\n            && (this.props.data.currentWorkflowStatus === 1)\n            ) {\n            await this.props.data.instanceContract.methods.addProposal(proposition).send({ from: this.props.data.accounts[0] }); // \"this.props.data\" provient de <RegisterProposal data = {this.state} />\n            this.props.data.listProposals.push(proposition); // ID doit être le même que dans la BC.\n\n            this.setState({ listProposals: this.props.data.listProposals });\n            }\n        else {\n            if ( proposition === '' ) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 La proposition ne peut pas être vide. 🛑\";\n                }\n            else if (this.props.data.currentWorkflowStatus !== 1) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 Ce n'est pas la session d'enregistrement des propositions. 🛑\";\n            }\n            setTimeout(() => { document.getElementById(\"msgError\").innerHTML = \"\"; }, \"5000\"); // Le message s'effacera dans 5 secondes.\n            }\n        };\n\n\n    render() {\n        let islistProposalsEmpty = true;\n        if (this.props.data.listProposals && this.props.data.listProposals.length > 0) { islistProposalsEmpty = false; }\n\n        return (\n            <>\n                <br />\n                <h2>Etape 1/3 : Enregistrement d'une ou plusieurs propositions</h2>\n                <br />\n                <div className = \"mainApp\">\n                    <textarea className=\"input\" id=\"proposition\" placeholder=\"Ecrivez ici votre proposition puis cliquez sur 'Enregistrer'.\" rows=\"4\" cols=\"50\"></textarea>\n                    <div id = \"msgError\"></div>\n                    <br /><button className = \"button buttonGreen\" onClick={this.runSet.bind(this)}>Enregistrer la proposition</button>\n                </div>\n                <div className = \"nextApp\">\n                    <b>Liste des propositions déjà enregistrées :</b>\n                    { islistProposalsEmpty ? (' - VIDE -') : ('') }\n                    { this.props.data.listProposals ? this.props.data.listProposals.map( value => (<><br />{value}</>) ) : '' }\n                </div>\n            </>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n\nexport default class Vote4proposal extends Component {\n\n    async runSet (e) {\n        let id_proposition = document.getElementById(\"id_proposition\").value;\n\n        if (\n            id_proposition.match(/^[0-9]{1,3}$/g)\n            && id_proposition !== ''\n            && (this.props.data.currentWorkflowStatus === 3)\n            ) {\n            await this.props.data.instanceContract.methods.setVote(id_proposition).send({ from: this.props.data.accounts[0] }); // \"this.props.data\" provient de <RegisterProposal data = {this.state} />\n            }\n        else {\n            if ( !id_proposition.match(/^[0-9]{1,3}$/g) ) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 Entrez uniquement le n° de la proposition. 🛑\";\n                }\n            else if ( id_proposition === '' ) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 Le vote ne peut pas être vide. 🛑\";\n                }\n            else if (this.props.data.currentWorkflowStatus !== 1) {\n                document.getElementById(\"msgError\").innerHTML = \"🛑 Ce n'est pas la session d'enregistrement des propositions. 🛑\";\n            }\n            setTimeout(() => { document.getElementById(\"msgError\").innerHTML = \"\"; }, \"3000\"); // Le message s'effacera dans 3 secondes.\n            }\n        };\n\n\n    render() {\n        let islistProposalsEmpty = true;\n        if (this.props.data.listProposals && this.props.data.listProposals.length > 0) { islistProposalsEmpty = false; }\n        console.log(\"this.props.data.listProposals : \", this.props.data.listProposals);\n\n        return (\n            <>\n                <br />\n                <h2>Etape 2/3 : Vote</h2>\n                <br />\n                <div className = \"mainApp\">\n                    <input className=\"input\" type=\"number\" pattern=\"[0-9]{1,3}\" id=\"id_proposition\" placeholder=\"Quel numéro de proposition ?\" size=\"35\" ></input>\n                    <div id = \"msgError\"></div>\n                    <br /><button className = \"button buttonGreen\" onClick={this.runSet.bind(this)}>Enregistrer le numéro</button>\n                </div>\n                <div className = \"nextApp AppVote\">\n                    <b>Votez pour l'une de ces propositions :</b>\n                    { islistProposalsEmpty ? (' - VIDE -') : ('') }\n                    { this.props.data.listProposals ? this.props.data.listProposals.map( (currElement, index) => (<><br />N°{index} : {currElement}</>) ) : '' }\n                </div>\n            </>\n        );\n    }\n}","import React, { Component } from \"react\";\n\n\nexport default class WinningProposal extends Component {\n    render() {\n        return (\n            <>\n                <br />\n                <h2>Etape 3/3 : la proposition gagnante</h2>\n                <br />\n                <div className = \"mainApp WinProp\">\n                    Description : {this.props.data.winPropDescription}\n                    <br />Nombre de votes : {this.props.data.winPropVoteCount}\n                    <br />(ID : {this.props.data.winPropID})\n                </div>\n            </>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Welcome from \"./components/Welcome.js\";\nimport RegisterAddress from \"./components/RegisterAddress.js\";\nimport RegisterProposal from \"./components/RegisterProposal.js\";\nimport Vote4Proposal from \"./components/Vote4Proposal.js\";\nimport WinningProposal from \"./components/WinningProposal.js\";\n\nimport \"./App.css\";\n\n\nclass App extends Component {\n    state = { \n        web3: null,\n        accounts: null,\n        networkId: null,\n        deployedNetwork: null,\n        instanceContract: null,\n        contractAddress: null,\n        owner: null,\n        owned: false,\n        listVoters: [],\n        isRegistered: false,\n        currentWorkflowStatus: 0,\n        displayWorkflowStatus: [],\n        listProposals: [],\n        winPropDescription: null,\n        winPropID: null,\n        winPropVoteCount: null,\n    };\n\n    componentDidMount = async () => {\n        try {\n            const web3 = await getWeb3();\n            const accounts = await web3.eth.getAccounts();\n            const networkId = await web3.eth.net.getId();\n            const deployedNetwork = VotingContract.networks[networkId];\n            const instanceContract = new web3.eth.Contract(\n                VotingContract.abi,\n                deployedNetwork && deployedNetwork.address,\n            );\n            const contractAddress = instanceContract._address;\n            const owner = await instanceContract.methods.owner().call();\n            let owned = accounts[0] === owner;\n\n            this.setState({ web3, accounts, networkId, deployedNetwork, instanceContract, contractAddress, owner, owned });\n        } catch (error) {\n            alert( `Failed to load web3, accounts, or contract. Check console for details.`, );\n            console.error(\"Error : \", error);\n        }\n\n        await this.listVoters();\n        await this.listProposals();\n        await this.isRegistered();\n        await this.setWorkflowStatus();\n    };\n\n\n\n    listVoters = async () => {\n        let options = {\n            fromBlock: 0, // Number || \"earliest\" || \"pending\" || \"latest\"\n            toBlock: 'latest'\n        };\n\n        let listVotersPastEvents = await this.state.instanceContract.getPastEvents('VoterRegistered', options);\n        \n        let listPastVotersOnly = listVotersPastEvents.map(value => value.returnValues._voterAddress);\n        this.setState({ listVoters: listPastVotersOnly });\n        };\n\n    listProposals = async () => {\n        let options = {\n            fromBlock: 0, // Number || \"earliest\" || \"pending\" || \"latest\"\n            toBlock: 'latest'\n        };\n\n        let listProposalsPastEvents = await this.state.instanceContract.getPastEvents('ProposalRegistered', options);\n        \n        let listPastProposalsIDOnly = listProposalsPastEvents.map(value => value.returnValues._proposalId);\n\n        for (let i = 0; i < listPastProposalsIDOnly.length; i++) {\n            const recipient = await this.state.instanceContract.methods.getOneProposal(i).call({from: this.state.accounts[0]});\n            this.state.listProposals.push(recipient.description);\n            }\n\n\n        this.setState({ listProposals: this.state.listProposals });\n        };\n\n    isRegistered = async () => {\n        let isRegistered_TEMP = false;\n        if (Array.isArray(this.state.listVoters)) {\n            isRegistered_TEMP = this.state.listVoters.includes(this.state.accounts[0]); // true ou false.\n            }\n        this.setState({ isRegistered_TEMP });\n        };\n\n/**\n * \n * @dev Gestion du Workflow. \n */\n    getWorkflowStatus = async () => {\n        let currentWorkflowStatus = Number( await this.state.instanceContract.methods.workflowStatus().call({ from: this.state.accounts[0] }) );\n\n        this.setState({ currentWorkflowStatus });\n\n        if (currentWorkflowStatus === 5) {\n            this.WinningProp();\n            }\n\n        return currentWorkflowStatus;\n        };\n\n\n    setWorkflowStatus = async () => {\n        let currentWorkflowStatus = await this.getWorkflowStatus();\n\n        let displayWorkflowStatus = [];\n        const wStatusMax = 6; // Nbre de statuts.\n        for (let i = 0; i < wStatusMax; i++) {\n            if (currentWorkflowStatus === i) {\n                displayWorkflowStatus[i] = 'WorkfFlow_CurrentStep';\n                }\n            else if ((currentWorkflowStatus + 1) === i) {\n                displayWorkflowStatus[i] = 'WorkfFlow_NextStep';\n                }\n            else {\n                displayWorkflowStatus[i] = 'WorkfFlow_NoStep';\n                }\n            }\n        \n        this.setState({ displayWorkflowStatus });\n    };\n    \n    \n    /**\n     * \n     * @dev Gestion des onClick().\n     */\n    startProposalsRegistering = async () => {\n        if (this.state.currentWorkflowStatus === 0) {\n            await this.state.instanceContract.methods.startProposalsRegistering().send({ from: this.state.accounts[0] });\n            this.setWorkflowStatus();\n            }\n    };\n\n    endProposalsRegistering = async () => {\n        if (this.state.currentWorkflowStatus === 1) {\n            await this.state.instanceContract.methods.endProposalsRegistering().send({ from: this.state.accounts[0] });\n            this.setWorkflowStatus();\n            }\n    };\n\n    startVotingSession = async () => {\n        if (this.state.currentWorkflowStatus === 2) {\n            await this.state.instanceContract.methods.startVotingSession().send({ from: this.state.accounts[0] });\n            this.setWorkflowStatus();\n            }\n    };\n\n    endVotingSession = async () => {\n        if (this.state.currentWorkflowStatus === 3) {\n            await this.state.instanceContract.methods.endVotingSession().send({ from: this.state.accounts[0] });\n            this.setWorkflowStatus();\n            }\n    };\n\n    tallyVotes = async () => {\n        console.log(\"tallyVotes\");\n        if (this.state.currentWorkflowStatus === 4) {\n            await this.state.instanceContract.methods.tallyVotes().send({ from: this.state.accounts[0] });\n            this.setWorkflowStatus();\n            // this.WinningProp();\n        }\n    };\n\n   WinningProp = async () => {\n        console.log(\"WinningProp\");\n        let options = {\n            fromBlock: 0, // Number || \"earliest\" || \"pending\" || \"latest\"\n            toBlock: 'latest'\n        };\n        let transac = await this.state.instanceContract.getPastEvents('Winner', options);\n        let winPropDescription = transac[0].returnValues._description;\n        let winPropID = transac[0].returnValues._proposalId;\n        let winPropVoteCount = transac[0].returnValues._voteCount;\n        console.log(\"winPropDescription\", winPropDescription);\n        console.log(\"winPropID\", winPropID);\n        console.log(\"winPropVoteCount\", winPropVoteCount);\n\n        // console.log(\"WinningProp\");\n        this.setState({ winPropDescription: transac[0].returnValues._description, winPropID: transac[0].returnValues._proposalId, winPropVoteCount: transac[0].returnValues._voteCount });\n    }\n\n\n\n    render() {\n        if (!this.state.web3) { // Affichage conditionnel.\n            return (\n                <div>\n                    Please be patient.\n                    <br />Loading Web3, accounts, and contract...\n                </div>\n            );\n        }\n        else if(this.state.owned) { // Affichage conditionnel pour l'administrateur.\n            return (\n                <div className = \"container containerAdmin\">\n                    <h1>Dashboard<br />administrateur</h1>\n                    <div>\n                        <span className = \"infoAdmin\">ID du réseau : {this.state.networkId}</span>\n                        <span className = \"infoAdmin\">Adresse du contrat : {this.state.contractAddress}</span>\n                    </div>\n                    <Welcome data = {this.state} />\n                    <div className = \"flexRow\">\n                        <div className = \"WorkfFlowStatus\">\n                            <div className = {`WorkfFlow_Step ${this.state.displayWorkflowStatus[0]}`} >1. Enregistrement des votants</div>\n                            <div className = {`WorkfFlow_Step ${this.state.displayWorkflowStatus[1]}`} onClick={this.startProposalsRegistering.bind(this)}>2. Début enregistrement des propositions</div>\n                            <div className = {`WorkfFlow_Step ${this.state.displayWorkflowStatus[2]}`} onClick={this.endProposalsRegistering.bind(this)}>3. Fin de l'enregistrement des propositions</div>\n                            <div className = {`WorkfFlow_Step ${this.state.displayWorkflowStatus[3]}`} onClick={this.startVotingSession.bind(this)}>4. Début enregistrement des votes</div>\n                            <div className = {`WorkfFlow_Step ${this.state.displayWorkflowStatus[4]}`} onClick={this.endVotingSession.bind(this)}>5. Fin de l'enregistrement des votes</div>\n                            <div className = {`WorkfFlow_Step ${this.state.displayWorkflowStatus[5]}`} onClick={this.tallyVotes.bind(this)}>6. Dépouillage des votes</div>\n                        </div>\n                        <div className = \"flexColumn\">\n                            <RegisterAddress data = {this.state} />\n                        </div>\n                    </div>\n\n                </div>\n                );\n        }\n        else if(this.state.isRegistered_TEMP) { // Affichage conditionnel pour 1 votant enregistré.\n            return (\n                <div className = \"container containerVotant\">\n                    <h1>Espace votant</h1>\n                    <Welcome data = {this.state} />\n                    {this.state.currentWorkflowStatus === 1 ? ( <RegisterProposal data = {this.state} /> ): (<></>)}\n                    {this.state.currentWorkflowStatus === 3 ? ( <Vote4Proposal data = {this.state} /> ): (<></>)}\n                    {this.state.currentWorkflowStatus === 5 ? ( <WinningProposal data = {this.state} /> ): (<></>)}\n                    {/* <div onClick={this.WinningProp.bind(this)}>6. Dépouillage des votes</div> */}\n                </div>\n            );\n        }\n        else { // Affichage conditionnel pour 1 non-votant.\n            return (\n                <div className = \"container containerNonVotant\">\n                    <div className = \"mainApp mainAppError\">\n                        <h1>ERREUR :</h1>\n                        <p>\n                            <b>Votre adresse n'est pas enregistrée :</b>\n                            <br />{this.state.accounts[0]}\n                        </p>\n                        <p>Vous ne pouvez donc pas participer au vote.</p>\n                        <p><br />Merci de contacter l'administrateur.</p>\n                    </div>\n                </div>\n            );\n        }\n\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}